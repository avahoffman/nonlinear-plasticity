Stan_model <- "
data{
int<lower=0> N;
int<lower=0> J;
vector[N] y;
matrix[N,J] X;
}
parameters{
vector[J] b;
real<lower=0> sigma;
}
transformed parameters{
vector[N] mu;
mu=X*b;
}
model{
sigma ~ cauchy(0,5);
b ~ normal(0,1000000);
y ~ normal(mu, sigma);  //likelihood
}
generated quantities{
vector[N] e_y;
vector[15] Y;
vector[3] G;
vector[5] T;
vector[1] G_E;
vector[1] T_E;
Y[1] = b[1];
Y[2] = b[1] + b[2];
Y[3] = b[1] + b[3];
Y[4] = b[1] + b[4];
Y[5] = b[1] + b[5];
Y[6] = b[1] + b[6];
Y[7] = b[1] + b[2] + b[6] + b[8];
Y[8] = b[1] + b[3] + b[6] + b[9];
Y[9] = b[1] + b[4] + b[6] + b[10];
Y[10] = b[1] + b[5] + b[6] + b[11];
Y[11] = b[1] + b[7];
Y[12] = b[1] + b[2] + b[7] + b[12];
Y[13] = b[1] + b[3] + b[7] + b[13];
Y[14] = b[1] + b[4] + b[7] + b[14];
Y[15] = b[1] + b[5] + b[7] + b[15];
G[1] = ( b[1] + (b[1] + b[2]) + (b[1] + b[3]) + (b[1] + b[4]) + (b[1] + b[5])) / 5
G[2] = ( (b[1] + b[6]) + (b[1] + b[2] + b[6] + b[8]) + (b[1] + b[3] + b[6] + b[9]) + (b[1] + b[4] + b[6] + b[10]) + (b[1] + b[5] + b[6] + b[11])) / 5
G[3] = ( (b[1] + b[7]) + (b[1] + b[2] + b[7] + b[12]) + (b[1] + b[3] + b[7] + b[13]) + (b[1] + b[4] + b[7] + b[14]) + (b[1] + b[5] + b[7] + b[15])) / 5
T[1] = ( b[1] + (b[1] + b[6]) + (b[1] + b[7])) / 3
T[2] = ( (b[1] + b[2]) + (b[1] + b[2] + b[6] + b[8]) + (b[1] + b[2] + b[7] + b[12]) ) / 3
T[3] = ( (b[1] + b[3]) + (b[1] + b[3] + b[6] + b[9]) + (b[1] + b[3] + b[7] + b[13]) ) / 3
T[4] = ( (b[1] + b[4]) + (b[1] + b[4] + b[6] + b[10]) + (b[1] + b[4] + b[7] + b[14]) ) / 3
T[5] = ( (b[1] + b[5]) + (b[1] + b[5] + b[6] + b[11]) + (b[1] + b[5] + b[7] + b[15]) ) / 3
G_E[1] = ( b[6] + b[7] ) / 2
T_E[1] = ( b[2] + b[3] + b[4] + b[5] ) / 4
e_y = y - mu;
}
"
comp <-
stan_model(model_code = Stan_model)
library(rstan)
library(LambertW)
options(mc.cores = parallel::detectCores())
comp <-
stan_model(model_code = Stan_model)
# Read in data
df <-
read.csv(infile, header = T)
# Filter out NA response variable
response.1 <-
df[, c(response)]
df.filt <-
df[!(response.1 = is.na(response.1)),]
# Make design matrix
dm <-
model.matrix(~ as.factor(trt) * as.factor(geno), data = df.filt) # Model Matrix
# New dependent variable with NA removed
response.var <-
df.filt[, c(response)]
response
response
f
d
d,asdaksnl.and.,asd
