alpha = 0.5,
stat = "identity")
ggplot(df, aes(x = measure)) +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = descr),
width = 0.5,
alpha = 0.5,
stat = "identity") +
facet_wrap(measure ~.)
?facet_wrap
ggplot(df, aes(x = measure)) +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = descr),
width = 0.5,
alpha = 0.5,
stat = "identity") +
facet_wrap(vars(measure), scales = "free_y")
ggplot(df, aes(x = descr)) +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = descr),
width = 0.5,
alpha = 0.5,
stat = "identity") +
facet_wrap(vars(measure), scales = "free_y")
ggplot(df, aes(x = descr)) +
coord_flip() +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = descr),
width = 0.5,
alpha = 0.5,
stat = "identity") +
facet_grid(.~measure, scales="free",space="free")
ggplot(df, aes(x = descr)) +
coord_flip() +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = descr),
width = 0.5,
alpha = 0.5,
stat = "identity") +
facet_wrap(var(measure), ncol = 1, scales = "free_x")
ggplot(df, aes(x = descr)) +
coord_flip() +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = descr),
width = 0.5,
alpha = 0.5,
stat = "identity")
treatment_effects <- c("(trt)15", "(trt)20", "(trt)25", "(trt)30")
df <-
read.csv("output/posterior_output.csv", header = T) %>%
dplyr::filter(descr %in% treatment_effects)
ggplot(df, aes(x = descr)) +
coord_flip() +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = descr),
width = 0.5,
alpha = 0.5,
stat = "identity")
ggplot(df, aes(x = descr)) +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = descr),
width = 0.5,
alpha = 0.5,
stat = "identity") +
facet_wrap(vars(measure), scales = "free_y")
ggplot(df, aes(x = descr)) +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = Pr),
width = 0.5,
alpha = 0.5,
stat = "identity") +
facet_wrap(vars(measure), scales = "free_y", ncol = 1)
ggplot(df, aes(x = descr)) +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = as.numeric(as.character(Pr)),
width = 0.5,
alpha = 0.5,
stat = "identity") +
facet_wrap(vars(measure), scales = "free_y", ncol = 1)
ggplot(df, aes(x = descr)) +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = as.numeric(as.character(Pr))),
width = 0.5,
alpha = 0.5,
stat = "identity") +
facet_wrap(vars(measure), scales = "free_y", ncol = 1)
ggplot(df, aes(x = descr)) +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = as.numeric(as.character(Pr))),
width = 0.5,
alpha = 0.5,
stat = "identity") +
facet_wrap(vars(measure), scales = "free_y", ncol = 1)
ggplot(df, aes(x = descr)) +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = as.numeric(as.character(Pr))),
width = 0.5,
alpha = 0.5,
stat = "identity") +
facet_wrap(vars(measure), scales = "free_y")
ggplot(df, aes(x = descr)) +
geom_boxplot(aes(ymin = as.numeric(as.character(X2.5.)) / as.numeric(as.character(mean)),
ymax = as.numeric(as.character(X97.5.)) / as.numeric(as.character(mean)),
middle = as.numeric(as.character(mean)) / as.numeric(as.character(mean)),
lower = as.numeric(as.character(X25.)) / as.numeric(as.character(mean)),
upper = as.numeric(as.character(X50.)) / as.numeric(as.character(mean)),
fill = as.numeric(as.character(Pr))),
width = 0.5,
stat = "identity") +
facet_wrap(vars(measure), scales = "free_y")
dm <- model.matrix(~as.factor(trt)*as.factor(geno), data=df.filt) ## MODEL MATRIX FOR STAN
dm
ests <-
# Collect mean, 25-75, CI, and Rhat
(summ_fit[grep("b", rownames(summ_fit)), c(1, 5, 6, 4, 8, 10)])
ests
re model
Stan_model <- "
data{
int<lower=0> N;
int<lower=0> J;
vector[N] y;
matrix[N,J] X;
}
parameters{
vector[J] b;
real<lower=0> sigma;
}
transformed parameters{
vector[N] mu;
mu=X*b;
}
model{
sigma ~ cauchy(0,5);
b ~ normal(0,1000000);
y ~ normal(mu, sigma);  //likelihood
}
generated quantities{
vector[N] e_y;
vector[15] Y;
vector[3] G;
vector[5] T;
Y[1] = b[1];
Y[2] = b[1] + b[2];
Y[3] = b[1] + b[3];
Y[4] = b[1] + b[4];
Y[5] = b[1] + b[5];
Y[6] = b[1] + b[6];
Y[7] = b[1] + b[2] + b[6] + b[8];
Y[8] = b[1] + b[3] + b[6] + b[9];
Y[9] = b[1] + b[4] + b[6] + b[10];
Y[10] = b[1] + b[5] + b[6] + b[11];
Y[11] = b[1] + b[7];
Y[12] = b[1] + b[2] + b[7] + b[12];
Y[13] = b[1] + b[3] + b[7] + b[13];
Y[14] = b[1] + b[4] + b[7] + b[14];
Y[15] = b[1] + b[5] + b[7] + b[15];
G[1] = ( b[1] + (b[1] + b[2]) + (b[1] + b[3]) + (b[1] + b[4]) + (b[1] + b[5])) / 5
G[2] = ( (b[1] + b[6]) + (b[1] + b[2] + b[6] + b[8]) + (b[1] + b[3] + b[6] + b[9]) + (b[1] + b[4] + b[6] + b[10]) + (b[1] + b[5] + b[6] + b[11])) / 5
G[3] = ( (b[1] + b[7]) + (b[1] + b[2] + b[7] + b[12]) + (b[1] + b[3] + b[7] + b[13]) + (b[1] + b[4] + b[7] + b[14]) + (b[1] + b[5] + b[7] + b[15])) / 5
T[1] = ( b[1] + (b[1] + b[6]) + (b[1] + b[7])) / 3
T[2] = ( (b[1] + b[2]) + (b[1] + b[2] + b[6] + b[8]) + (b[1] + b[2] + b[7] + b[12]) ) / 3
T[3] = ( (b[1] + b[3]) + (b[1] + b[3] + b[6] + b[9]) + (b[1] + b[3] + b[7] + b[13]) ) / 3
T[4] = ( (b[1] + b[4]) + (b[1] + b[4] + b[6] + b[10]) + (b[1] + b[4] + b[7] + b[14]) ) / 3
T[5] = ( (b[1] + b[5]) + (b[1] + b[5] + b[6] + b[11]) + (b[1] + b[5] + b[7] + b[15]) ) / 3
e_y = y - mu;
}
"
comp <-
stan_model(model_code = Stan_model)
infile = "data/biomass_plants_clean.csv"
response="Bv"
iter = 10000
# Read in data
df <-
read.csv(infile, header = T)
# Filter out NA response variable
response.1 <-
df[, c(response)]
df.filt <-
df[!(response.1 = is.na(response.1)),]
# Make design matrix
dm <-
model.matrix(~ as.factor(trt) * as.factor(geno), data = df.filt) # Model Matrix
# New dependent variable with NA removed
response.var <-
df.filt[, c(response)]
# Declare model components
model.components <-
list(
'N' = nrow(df.filt), #
'y' = response.var,
'X' = dm,
'J' = ncol(dm)
)
##SAMPLE
fit <-
sampling(
comp,
data = model.components,
iter = iter,
warmup = iter / 2,
thin = 1,
chains = 3
)
summ_fit <-
summary(fit)
(summ_fit[grep("G", rownames(summ_fit)), c(1, 5, 6, 4, 8, 10)])
(summ_fit[grep("G", rownames(summ_fit)), c(1, 5, 6, 4, 8, 10)])
summ_fit[grep("G", rownames(summ_fit)), c(1, 5, 6, 4, 8, 10)]
summ_fit
(summ_fit[grep("b", rownames(summ_fit)), c(1, 5, 6, 4, 8, 10)])
ests <-
# Collect mean, 25-75, CI, and Rhat
#(summ_fit[grep("b", rownames(summ_fit)), c(1, 5, 6, 4, 8, 10)])
(summ_fit[grep("G", rownames(summ_fit)), c(1, 5, 6, 4, 8, 10)])
ests
# Declare model
Stan_model <- "
data{
int<lower=0> N;
int<lower=0> J;
vector[N] y;
matrix[N,J] X;
}
parameters{
vector[J] b;
real<lower=0> sigma;
}
transformed parameters{
vector[N] mu;
mu=X*b;
}
model{
sigma ~ cauchy(0,5);
b ~ normal(0,1000000);
y ~ normal(mu, sigma);  //likelihood
}
generated quantities{
vector[N] e_y;
vector[15] Y;
vector[3] G;
vector[5] T;
Y[1] = b[1];
Y[2] = b[1] + b[2];
Y[3] = b[1] + b[3];
Y[4] = b[1] + b[4];
Y[5] = b[1] + b[5];
Y[6] = b[1] + b[6];
Y[7] = b[1] + b[2] + b[6] + b[8];
Y[8] = b[1] + b[3] + b[6] + b[9];
Y[9] = b[1] + b[4] + b[6] + b[10];
Y[10] = b[1] + b[5] + b[6] + b[11];
Y[11] = b[1] + b[7];
Y[12] = b[1] + b[2] + b[7] + b[12];
Y[13] = b[1] + b[3] + b[7] + b[13];
Y[14] = b[1] + b[4] + b[7] + b[14];
Y[15] = b[1] + b[5] + b[7] + b[15];
G[1] = ( b[1] + (b[1] + b[2]) + (b[1] + b[3]) + (b[1] + b[4]) + (b[1] + b[5])) / 5
G[2] = ( (b[1] + b[6]) + (b[1] + b[2] + b[6] + b[8]) + (b[1] + b[3] + b[6] + b[9]) + (b[1] + b[4] + b[6] + b[10]) + (b[1] + b[5] + b[6] + b[11])) / 5
G[3] = ( (b[1] + b[7]) + (b[1] + b[2] + b[7] + b[12]) + (b[1] + b[3] + b[7] + b[13]) + (b[1] + b[4] + b[7] + b[14]) + (b[1] + b[5] + b[7] + b[15])) / 5
T[1] = ( b[1] + (b[1] + b[6]) + (b[1] + b[7])) / 3
T[2] = ( (b[1] + b[2]) + (b[1] + b[2] + b[6] + b[8]) + (b[1] + b[2] + b[7] + b[12]) ) / 3
T[3] = ( (b[1] + b[3]) + (b[1] + b[3] + b[6] + b[9]) + (b[1] + b[3] + b[7] + b[13]) ) / 3
T[4] = ( (b[1] + b[4]) + (b[1] + b[4] + b[6] + b[10]) + (b[1] + b[4] + b[7] + b[14]) ) / 3
T[5] = ( (b[1] + b[5]) + (b[1] + b[5] + b[6] + b[11]) + (b[1] + b[5] + b[7] + b[15]) ) / 3
e_y = y - mu;
}
"
comp <-
stan_model(model_code = Stan_model)
comp <-
stan_model(model_code = Stan_model)
eclare model
Stan_model <- "
data{
int<lower=0> N;
int<lower=0> J;
vector[N] y;
matrix[N,J] X;
}
parameters{
vector[J] b;
real<lower=0> sigma;
}
transformed parameters{
vector[N] mu;
mu=X*b;
}
model{
sigma ~ cauchy(0,5);
b ~ normal(0,1000000);
y ~ normal(mu, sigma);  //likelihood
}
generated quantities{
vector[N] e_y;
vector[15] Y;
vector[3] G;
vector[5] T;
vector[1] G_E;
vector[1] T_E;
Y[1] = b[1];
Y[2] = b[1] + b[2];
Y[3] = b[1] + b[3];
Y[4] = b[1] + b[4];
Y[5] = b[1] + b[5];
Y[6] = b[1] + b[6];
Y[7] = b[1] + b[2] + b[6] + b[8];
Y[8] = b[1] + b[3] + b[6] + b[9];
Y[9] = b[1] + b[4] + b[6] + b[10];
Y[10] = b[1] + b[5] + b[6] + b[11];
Y[11] = b[1] + b[7];
Y[12] = b[1] + b[2] + b[7] + b[12];
Y[13] = b[1] + b[3] + b[7] + b[13];
Y[14] = b[1] + b[4] + b[7] + b[14];
Y[15] = b[1] + b[5] + b[7] + b[15];
G[1] = ( b[1] + (b[1] + b[2]) + (b[1] + b[3]) + (b[1] + b[4]) + (b[1] + b[5])) / 5
G[2] = ( (b[1] + b[6]) + (b[1] + b[2] + b[6] + b[8]) + (b[1] + b[3] + b[6] + b[9]) + (b[1] + b[4] + b[6] + b[10]) + (b[1] + b[5] + b[6] + b[11])) / 5
G[3] = ( (b[1] + b[7]) + (b[1] + b[2] + b[7] + b[12]) + (b[1] + b[3] + b[7] + b[13]) + (b[1] + b[4] + b[7] + b[14]) + (b[1] + b[5] + b[7] + b[15])) / 5
T[1] = ( b[1] + (b[1] + b[6]) + (b[1] + b[7])) / 3
T[2] = ( (b[1] + b[2]) + (b[1] + b[2] + b[6] + b[8]) + (b[1] + b[2] + b[7] + b[12]) ) / 3
T[3] = ( (b[1] + b[3]) + (b[1] + b[3] + b[6] + b[9]) + (b[1] + b[3] + b[7] + b[13]) ) / 3
T[4] = ( (b[1] + b[4]) + (b[1] + b[4] + b[6] + b[10]) + (b[1] + b[4] + b[7] + b[14]) ) / 3
T[5] = ( (b[1] + b[5]) + (b[1] + b[5] + b[6] + b[11]) + (b[1] + b[5] + b[7] + b[15]) ) / 3
G_E[1] = ( b[6] + b[7] ) / 2
T_E[1] = ( b[2] + b[3] + b[4] + b[5] ) / 4
e_y = y - mu;
}
"
comp <-
stan_model(model_code = Stan_model)
# Declare model
Stan_model <- "
data{
int<lower=0> N;
int<lower=0> J;
vector[N] y;
matrix[N,J] X;
}
parameters{
vector[J] b;
real<lower=0> sigma;
}
transformed parameters{
vector[N] mu;
mu=X*b;
}
model{
sigma ~ cauchy(0,5);
b ~ normal(0,1000000);
y ~ normal(mu, sigma);  //likelihood
}
generated quantities{
vector[N] e_y;
vector[15] Y;
vector[3] G;
vector[5] T;
vector[1] G_E;
vector[1] T_E;
Y[1] = b[1];
Y[2] = b[1] + b[2];
Y[3] = b[1] + b[3];
Y[4] = b[1] + b[4];
Y[5] = b[1] + b[5];
Y[6] = b[1] + b[6];
Y[7] = b[1] + b[2] + b[6] + b[8];
Y[8] = b[1] + b[3] + b[6] + b[9];
Y[9] = b[1] + b[4] + b[6] + b[10];
Y[10] = b[1] + b[5] + b[6] + b[11];
Y[11] = b[1] + b[7];
Y[12] = b[1] + b[2] + b[7] + b[12];
Y[13] = b[1] + b[3] + b[7] + b[13];
Y[14] = b[1] + b[4] + b[7] + b[14];
Y[15] = b[1] + b[5] + b[7] + b[15];
G[1] = ( b[1] + (b[1] + b[2]) + (b[1] + b[3]) + (b[1] + b[4]) + (b[1] + b[5])) / 5
G[2] = ( (b[1] + b[6]) + (b[1] + b[2] + b[6] + b[8]) + (b[1] + b[3] + b[6] + b[9]) + (b[1] + b[4] + b[6] + b[10]) + (b[1] + b[5] + b[6] + b[11])) / 5
G[3] = ( (b[1] + b[7]) + (b[1] + b[2] + b[7] + b[12]) + (b[1] + b[3] + b[7] + b[13]) + (b[1] + b[4] + b[7] + b[14]) + (b[1] + b[5] + b[7] + b[15])) / 5
T[1] = ( b[1] + (b[1] + b[6]) + (b[1] + b[7])) / 3
T[2] = ( (b[1] + b[2]) + (b[1] + b[2] + b[6] + b[8]) + (b[1] + b[2] + b[7] + b[12]) ) / 3
T[3] = ( (b[1] + b[3]) + (b[1] + b[3] + b[6] + b[9]) + (b[1] + b[3] + b[7] + b[13]) ) / 3
T[4] = ( (b[1] + b[4]) + (b[1] + b[4] + b[6] + b[10]) + (b[1] + b[4] + b[7] + b[14]) ) / 3
T[5] = ( (b[1] + b[5]) + (b[1] + b[5] + b[6] + b[11]) + (b[1] + b[5] + b[7] + b[15]) ) / 3
G_E[1] = ( b[6] + b[7] ) / 2
T_E[1] = ( b[2] + b[3] + b[4] + b[5] ) / 4
e_y = y - mu;
}
"
comp <-
stan_model(model_code = Stan_model)
infile =  "data/biomass_plants_clean.csv"
recovery = F
response = "Bv"
# Read in data
df <-
read.csv(infile, header = T)
# Filter out NA response variable
response.1 <-
df[, c(response)]
df.filt <-
df[!(response.1 = is.na(response.1)),]
# Make design matrix
dm <-
model.matrix(~ as.factor(trt) * as.factor(geno), data = df.filt) # Model Matrix
# New dependent variable with NA removed
response.var <-
df.filt[, c(response)]
# Declare model components
model.components <-
list(
'N' = nrow(df.filt), #
'y' = response.var,
'X' = dm,
'J' = ncol(dm)
)
##SAMPLE
fit <-
sampling(
comp,
data = model.components,
iter = iter,
warmup = iter / 2,
thin = 1,
chains = 3
)
summ_fit <-
summary(fit)
# Read in data
df <-
read.csv(infile, header = T)
# Filter out NA response variable
response.1 <-
df[, c(response)]
df.filt <-
df[!(response.1 = is.na(response.1)),]
# Make design matrix
dm <-
model.matrix(~ as.factor(trt) * as.factor(geno), data = df.filt) # Model Matrix
# New dependent variable with NA removed
response.var <-
df.filt[, c(response)]
# Declare model components
model.components <-
list(
'N' = nrow(df.filt), #
'y' = response.var,
'X' = dm,
'J' = ncol(dm)
)
##SAMPLE
fit <-
sampling(
comp,
data = model.components,
iter = iter,
warmup = iter / 2,
thin = 1,
chains = 3
)
summ_fit <-
summary(fit)
